#!/usr/bin/ruby

require 'json'
require 'colorize'
require 'optparse'

if ENV["HELLO_DEPLOY_HOCKEY_TOKEN"].nil?
  puts "! You must provide 'HELLO_DEPLOY_HOCKEY_TOKEN' in your ENV".red.bold
  puts "-> Generate an API token at https://rink.hockeyapp.net/manage/auth_tokens".green
  exit
end

options = OpenStruct.new
options.clean = false
options.tests = false
options.flavor = "beta"
options.tag = nil
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options]".green

  opts.on("-t", "--[no-]tests", "Run test suite before uploading") do |t|
    options.tests = t
  end
  
  opts.on("-k", "--[no-]clean", "Clean the project before building") do |k|
    options.clean = k
  end
  
  opts.on("-fFLAVOR", "--flavor=FLAVOR", "The build flavor") do |f|
    options.flavor = f
  end
  
  opts.on("-sTAG", "--save-tag=TAG", "Tag the current branch contents") do |t|
    options.tag = t
  end
  
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

end.parse!

flavors_path = File::join(File::dirname($0), "res", "deploy_conf.json")
flavors = JSON::parse(File::read(flavors_path))
flavor = flavors[options.flavor]

if flavor.nil?
  synonym = flavors["synonyms"][options.flavor]
  flavor = flavors[synonym]
  if flavor.nil?
    puts "Unknown build flavor `#{options.flavor}'".red.bold
    exit
  else
    options.flavor = synonym
  end
end

if flavor["tag_required"] && options.tag.nil?
  puts "Build flavor `#{options.flavor}' requires a tag to deploy".red.bold
  exit
end

def last_command_failed?
  $?.to_i != 0
end


##region Cleaning

if options.clean
  puts "-> Cleaning".blue
  system "./gradlew clean"
  abort "-- Cleaning Failed".red if last_command_failed?
  puts "-- Clean Completed".green
end

#endregion


#region Tests

if options.test
  puts "-> Building and running tests".blue
  system "./gradlew connectedCheck"
  abort "-- Tests Failed".red if last_command_failed?
  puts "-- Tests Passed".green
end

#endregion


#region Assembling

puts "-> Assembling `#{options.flavor}' build".blue

assemble_command = flavor["assemble_command"]
system "./gradlew #{assemble_command}"
abort "-- Build Failed".red if last_command_failed?
puts "-- Build Completed".green

#endregion


#region Uploading

puts "-> Uploading to HockeyApp".blue

apk_name = flavor["apk_name"]
app_id = flavor["hockey_app_id"]
hockey_token = ENV["HELLO_DEPLOY_HOCKEY_TOKEN"]
file_name = "app/build/outputs/apk/#{apk_name}.apk"

raw_response = `curl -X POST \
  -F "status=1" \
  -F "notify=0" \
  -F "ipa=@#{file_name}" \
  -H "X-HockeyAppToken: #{hockey_token}" \
  https://rink.hockeyapp.net/api/2/apps/#{app_id}/app_versions/upload`
abort "-- Upload failed".red if last_command_failed?
puts "-- Upload completed".green

response = JSON::parse(raw_response)
config_url = response["config_url"]
puts "-> Opening <#{config_url}>".blue
system "open '#{config_url}'"

#endregion


#region Tagging

unless options.tag.nil?
  puts "-> Creating git tag `#{options.tag}'".blue
  system "git tag '#{options.tag}'"
  system "git push origin --tags"
  abort "-- Creating git tag failed".red if last_command_failed?
  puts "-- Created git tag".green
end

#endregion


#region Revealing

if flavor["reveal"]
  puts "-> Revealing `#{file_name}'".blue
  system "open --reveal '#{file_name}'"
end

#endregion
