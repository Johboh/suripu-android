#!/usr/bin/ruby

require 'json'
require 'colorize'

FILE_TEMPLATE = <<ENDJAVA
// Generated by the `gen_device_support' tool.  DO NOT EDIT!
package is.hello.sense.bluetooth.stacks.android;

import android.os.Build;
import android.support.annotation.NonNull;

import java.util.regex.Pattern;

import is.hello.sense.bluetooth.stacks.BluetoothStack;

public final class DeviceSupport {
    static boolean isModelSupported(@NonNull String manufacturerPattern, @NonNull String model) {
        return Pattern.compile(manufacturerPattern, Pattern.CASE_INSENSITIVE)
                      .matcher(model)
                      .matches();
    }

    static String getManufacturerSupportedPattern(@NonNull String manufacturer) {
        switch (manufacturer.toLowerCase()) {
<<#SWITCH_CASES#>>
        }
    }

    public static @NonNull BluetoothStack.SupportLevel getDeviceSupportLevel() {
        String manufacturerPattern = getManufacturerSupportedPattern(Build.MANUFACTURER);
        if (isModelSupported(manufacturerPattern, Build.MODEL)) {
            return BluetoothStack.SupportLevel.TESTED;
        } else {
            return BluetoothStack.SupportLevel.UNTESTED;
        }
    }

    public static boolean isHighPowerPreScanNeeded() {
        return false;
    }
}
ENDJAVA
CASE_TEMPLATE = <<ENDJAVA
            <<#CASE#>>: {
                return <<#PATTERN#>>;
            }
ENDJAVA

def quote_str(str)
  str.to_json
     .gsub("\\/") {"/"}
     .gsub("\\") {"\\\\"}
end

def gen_manufacturer_case(manufacturer)
  if manufacturer == "*"
    "default"
  else
    "case #{quote_str(manufacturer)}"
  end
end

def gen_case(raw_manufacturer, raw_pattern)
  manufacturer = gen_manufacturer_case(raw_manufacturer)
  pattern = quote_str(raw_pattern)
  CASE_TEMPLATE.gsub("<<#CASE#>>") {manufacturer}
               .gsub("<<#PATTERN#>>") {pattern}
end

def gen_file(cases)
  joined_cases = cases.join("").chomp
  FILE_TEMPLATE.gsub("<<#SWITCH_CASES#>>", joined_cases)
end

supported_devices_path = File::join(File::dirname($0), "res", "Supported Devices", "manifest.json")
supported_devices = JSON::parse(File::read(supported_devices_path))

cases = supported_devices.map do |manufacturer, patterns|
  unless patterns["unsupported"].nil?
    $stderr.puts "!!! `unsupported' is unsupported (manufacturer: #{manufacturer})".red.bold
    exit(-1)
  end
  
  gen_case(manufacturer, patterns['supported'])
end

result = gen_file(cases)
output_path = File::join(
  File::dirname($0), "..", "app", "src", "main", "java",
  "is", "hello", "sense", "bluetooth", "stacks", "android",
  "DeviceSupport.java"
)
File.open(output_path, "w") do |f|
  f.write(result)
end
